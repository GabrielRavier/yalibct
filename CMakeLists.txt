cmake_minimum_required(VERSION 3.12)

project(yalibct
  VERSION 0.1
  DESCRIPTION "Yet another libc testsuite - Tests whatever libc it is run under"
  LANGUAGES C
)

# Note: In theory this would just disable all tests, but obviously not enough
# work has been put in to make that an actual possibility, as making tests
# disable-able is mostly based on actually encountering libcs that fail to pass
# those tests (same for feature/function presence tests and stuff like that:
# those are pretty much only added when we encounter a libc that yalibct would
# fail to compile on without the presence test)
option(YALIBCT_DISABLE_ALL_POSSIBLE_TESTS "If this is set to ON, then none of the tests that can be turned off will be run by default, i.e. without the corresponding options being explicitly set" OFF)

option(YALIBCT_DISABLE_C89_TESTS "If this is set to OFF, then none of the tests that depend on the C89 standard will be run by default" "${YALIBCT_DISABLE_ALL_POSSIBLE_TESTS}")
option(YALIBCT_DISABLE_MANDATING_C89_SYMBOLS "Whether or not we should error when we're told a C89 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_LONG_DOUBLE_TESTS "Whether or not tests that depend on long double being a type that behaves correctly (in particular, accordingly to information given out by the implementation about its behavior) should be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %c will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_I_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %i will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_PRECISION_TESTS "Whether or not tests that depend on the printf family of functions supporting %.* will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_PRECISION_ON_WIDE_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %.*ls will be run" "${YALIBCT_DISABLE_PRINTF_PRECISION_TESTS}")
option(YALIBCT_DISABLE_PRINTF_PRECISION_ON_WIDE_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %.*lc will be run" "${YALIBCT_DISABLE_PRINTF_PRECISION_TESTS}")
option(YALIBCT_DISABLE_PRINTF_0_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %0 will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %f will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_N_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %n will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_HASH_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %# will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_L_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %L will be run" "${YALIBCT_DISABLE_LONG_DOUBLE_TESTS}")
option(YALIBCT_DISABLE_PRINTF_G_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %g/%G will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_E_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %e/%E will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_H_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %h will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_LOWERCASE_L_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %l will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_X_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %X will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_MINUS_FLAG_TESTS "Whether or not tests that depend on the scanf family of functions supporting %- will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_PLUS_FLAG_WITH_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %+s will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_PLUS_FLAG_WITH_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %+c will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_TESTS "Whether or not tests that depend on the printf family of functions supporting field lengths (% followed by a number or an asterisk) will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %*s will be run" "${YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_TESTS}")
option(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_WIDE_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %*ls will be run" "${YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_S_CONVERSION_SPECIFIER_TESTS}")
option(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_WIDE_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %*lc will be run" "${YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_S_CONVERSION_SPECIFIER_TESTS}")
option(YALIBCT_DISABLE_PRINTF_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %s will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_PRINTF_OUTPUT_ERROR_RETURN_VALUE_TESTS "Whether or not tests that depend on the printf family of functions returning a negative value when an output error occurs will be run" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_SCANF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %f will be run by default" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_SCANF_LOWERCASE_X_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %x will be run by default" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_SCANF_LEFT_SQUARE_BRACKET_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %[ will be run by default" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_WORK_AROUND_NAMESPACE_VIOLATIONS "Whether or not known cases of libc implementations wrongly trampling on user namespace for no real reason should be worked around or if the subsequence error should deliberately be allowed to occur" "${YALIBCT_DISABLE_C89_TESTS}")

option(YALIBCT_DISABLE_C95_TESTS "If this is set to OFF, then none of the tests that depend on the C95 standard will be run by default" "${YALIBCT_DISABLE_C89_TESTS}")
option(YALIBCT_DISABLE_MANDATING_C95_SYMBOLS "Whether or not we should error when we're told a C95 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_C95_TESTS}")
option(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %lc will be run" "${YALIBCT_DISABLE_C95_TESTS}")
option(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %ls will be run" "${YALIBCT_DISABLE_C95_TESTS}")

option(YALIBCT_DISABLE_C99_TESTS "If this is set to OFF, then none of the tests that depend on the C99 standard will be run by default" "${YALIBCT_DISABLE_C95_TESTS}")
option(YALIBCT_DISABLE_MANDATING_C99_SYMBOLS "Whether or not we should error when we're told a C99 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_PRINTF_A_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %a/%A will be run" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_PRINTF_T_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %t will be run" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_PRINTF_HH_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %hh will be run" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_SNPRINTF_SIZE_LARGER_THAN_ACTUAL_BUFFER_TESTS "Whether or not tests that depend on snprintf correctly handling a buffer size larger than the buffer's actual size will be run" "${YALIBCT_DISABLE_C99_TESTS}") # (note: It is currently disputed whether this is a defect in the C standard - see https://sourceware.org/bugzilla/show_bug.cgi?id=30441)
option(YALIBCT_DISABLE_SCANF_J_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %j will be run" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_SCANF_Z_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %z will be run by default" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_SCANF_T_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %t will be run by default" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_SCANF_P_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the scanf family of functions supporting %p will be run by default" "${YALIBCT_DISABLE_C99_TESTS}")

option(YALIBCT_DISABLE_C11_TESTS "If this is set to OFF, then none of the tests that depend on the C11 standard will be run by default" "${YALIBCT_DISABLE_C99_TESTS}")
option(YALIBCT_DISABLE_MANDATING_C11_SYMBOLS "Whether or not we should error when we're told a C11 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_C11_TESTS}")

option(YALIBCT_DISABLE_C23_TESTS "If this is set to OFF, then none of the tests that depend on the upcoming C23 standard will be run by default" "${YALIBCT_DISABLE_C11_TESTS}")
option(YALIBCT_DISABLE_MANDATING_C23_SYMBOLS "Whether or not we should error when we're told a C23 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_C23_TESTS}")
option(YALIBCT_DISABLE_PRINTF_LOWERCASE_B_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %b will be run by default" "${YALIBCT_DISABLE_C23_TESTS}")
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_B_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %B will be run by default" "${YALIBCT_DISABLE_C23_TESTS}")

option(YALIBCT_DISABLE_POSIX_TESTS "If this is set to OFF, then none of the tests that depend on the POSIX standard will be run by default" "${YALIBCT_DISABLE_ALL_POSSIBLE_TESTS}")
option(YALIBCT_DISABLE_MANDATING_POSIX_SYMBOLS "Whether or not we should error when we're told a POSIX symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_DOESNT_HAVE_ option" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_PRINTF_APOSTROPHE_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %' will be run by default" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %C will be run by default" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %S will be run by default" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_PRINTF_NUMBERED_ARGUMENTS_TESTS "Whether or not tests that depend on the printf family of functions supporting numbered argument conversion specifications (i.e. %n$) will be run" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_PRINTF_ERRNO_TESTS "Whether or not tests that depend on the printf family of functions properly setting errno will be run by default" "${YALIBCT_DISABLE_POSIX_TESTS}")
option(YALIBCT_DISABLE_SCANF_NUMBERED_ARGUMENTS_TESTS "Whether or not tests that depend on the scanf family of functions supporting numbered argument conversion specifications (i.e. %n$) will be run" "${YALIBCT_DISABLE_POSIX_TESTS}")

# Misc tests that aren't part of any standard but are commonly supported
option(YALIBCT_DISABLE_ALL_NON_STANDARD_TESTS "Whether or not tests that depend on anything that isn't defined in any standard will be run" "${YALIBCT_DISABLE_ALL_POSSIBLE_TESTS}")
option(YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS "Whether or not tests that depend on any locales that aren't defined by the standard that the implementation might lie about supporting (as effectively allowed by the standard saying that non-standard locale names have unspecified behavior) will be run" "${YALIBCT_DISABLE_ALL_NON_STANDARD_TESTS}")
option(YALIBCT_DISABLE_RARE_LOCALE_TESTS "Whether or not tests that depend on rare locales that the implementation might lie about supporting (as effectively allowed by the standard saying that non-standard locale names have unspecified behavior) will be run" "${YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS}")
option(YALIBCT_DISABLE_PRINTF_ROUNDING_DIRECTION_TESTS "Whether or not tests that depend on the printf family of functions rounding floating point numbers properly will be run. I am unsure of whether the C standard requires this, but it seems like a very useful property for the functions to have regardless" "${YALIBCT_DISABLE_ALL_NON_STANDARD_TESTS}")
option(YALIBCT_DISABLE_LC_NUMERIC_TESTS "Whether or not tests that depend on LC_NUMERIC support being present will be run" "${YALIBCT_DISABLE_ALL_NON_STANDARD_TESTS}")
option(YALIBCT_DISABLE_DEFAULT_UTF_8_LOCALE_TESTS "Whether or not tests that depends on the default locale making it possible to use UTF-8 strings with standard C functions (in particular, tests involving conversions of wchar_t to multibyte characters) will be run" "${YALIBCT_DISABLE_ALL_NON_STANDARD_TESTS}")

include(CheckIncludeFile)
include(CheckSymbolExists)
include(CheckLinkerFlag)
include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckStructHasMember)
include(cmake/CheckTypeExists.cmake)

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)

if (NOT DEFINED YALIBCT_COMPILE_DEFINITIONS)
  set(YALIBCT_COMPILE_DEFINITIONS -D_GNU_SOURCE -D_ALL_SOURCE -D_NETBSD_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_FILE_OFFSET_BITS=64 -D_XOPEN_SOURCE_EXTENDED -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L -D_DARWIN_C_SOURCE -D__EXTENSIONS__ -D_OPENBSD_SOURCE -D_POSIX_SOURCE -D_POSIX_1_SOURCE=2 -D_POSIX_PTHREAD_SEMANTICS -D__STDC_WANT_LIB_EXT1__ -D__STDC_WANT_IEC_60559_ATTRIBS_EXT__ -D__STDC_WANT_IEC_60559_BFP_EXT__ -D__STDC_WANT_IEC_60559_DFP_EXT__ -D__STDC_WANT_IEC_60559_EXT__ -D__STDC_WANT_IEC_60559_FUNCS_EXT__ -D__STDC_WANT_IEC_60559_TYPES_EXT__ -D__STDC_WANT_LIB_EXT2__ -D__STDC_WANT_MATH_SPEC_FUNCS__ -D_TANDEM_SOURCE -D_COSMO_SOURCE CACHE INTERNAL YALIBCT_COMPILE_DEFINITIONS)
endif()

# Takes as argument the name of a macro
# It will add a macro of the same name as that macro to the compilation flags
function(yalibct_append_macro_to_compiler_flags macro_name)

  list(APPEND YALIBCT_COMPILE_DEFINITIONS "-D${macro_name}")
  set(YALIBCT_COMPILE_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")

endfunction()

# Takes as argument the name of a macro
# If it is not a false constant, it will add a macro of the same name as that macro to the compilation flags
function(yalibct_append_macro_to_compiler_flags_if_true macro_name)

  if ("${${macro_name}}")
    yalibct_append_macro_to_compiler_flags("${macro_name}")
  endif()

endfunction()

yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_LC_NUMERIC_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_ROUNDING_DIRECTION_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_RARE_LOCALE_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_LOWERCASE_B_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_UPPERCASE_B_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_E_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_G_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_UPPERCASE_L_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_A_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_NUMBERED_ARGUMENTS_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_UPPERCASE_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_HASH_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_N_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_UPPERCASE_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_0_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_HH_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_PRECISION_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_T_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_APOSTROPHE_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_J_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_Z_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_T_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_P_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_ERRNO_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_H_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_NUMBERED_ARGUMENTS_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_UPPERCASE_X_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_MINUS_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_LOWERCASE_X_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_PLUS_FLAG_WITH_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_PLUS_FLAG_WITH_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SCANF_LEFT_SQUARE_BRACKET_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_OUTPUT_ERROR_RETURN_VALUE_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_WORK_AROUND_NAMESPACE_VIOLATIONS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_LONG_DOUBLE_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_DEFAULT_UTF_8_LOCALE_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_SNPRINTF_SIZE_LARGER_THAN_ACTUAL_BUFFER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_I_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_LOWERCASE_L_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_PRECISION_ON_WIDE_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_PRECISION_ON_WIDE_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_WIDE_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags_if_true(YALIBCT_DISABLE_PRINTF_FIELD_WIDTH_ON_WIDE_C_CONVERSION_SPECIFIER_TESTS)

set(YALIBCT_POTENTIALLY_WANTED_LIBRARIES "m;compat")
set(YALIBCT_WANTED_LIBRARIES "")

foreach(YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR ${YALIBCT_POTENTIALLY_WANTED_LIBRARIES})
  check_linker_flag(C "-l${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR}" "YALIBCT_HAS_LIBRARY_${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR}")
  if ("${YALIBCT_HAS_LIBRARY_${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR}}")
    list(APPEND YALIBCT_WANTED_LIBRARIES "${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR}")
  endif()
endforeach()

list(APPEND CMAKE_REQUIRED_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}")
list(APPEND CMAKE_REQUIRED_LIBRARIES "${YALIBCT_WANTED_LIBRARIES}")

# If the CACHE macro named by the argument is set to a true constant, set it to the empty string
# Otherwise, set it to "1"
function(yalibct_invert_check_cache_value macro_name)
  if ("$CACHE{${macro_name}}")
    set("${macro_name}" "" CACHE INTERNAL "${macro_name}")
  else()
    set("${macro_name}" "1" CACHE INTERNAL "${macro_name}")
  endif()
endfunction()

function(yalibct_check_set_cache_value_from_command_line macro_name)
  set("${macro_name}" "${${macro_name}}" CACHE INTERNAL "${macro_name}")
  set("${macro_name}_DEFINED_ON_COMMAND_LINE" "1" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
endfunction()

function(yalibct_check_include_file header_filenames macro_name)

  if (NOT DEFINED "${macro_name}")
    CHECK_INCLUDE_FILE("${header_filenames}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not looking for '${header_filenames}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")

endfunction()

function(yalibct_check_libc_symbol_define_libc_doesnt_have_symbol symbol_name)

  list(APPEND YALIBCT_COMPILE_DEFINITIONS "-D${symbol_name}=THE_LIBC_THIS_WAS_COMPILED_UNDER_DOESNT_HAVE_${symbol_name}")
  set(YALIBCT_COMPILE_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")

endfunction()

function(yalibct_check_libc_symbol symbol_name header_filenames macro_name)

  if (NOT DEFINED "${macro_name}")
    check_symbol_exists("${symbol_name}" "${header_filenames}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not looking for '${symbol_name}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")
  if ("${${macro_name}}")
    yalibct_check_libc_symbol_define_libc_doesnt_have_symbol("${symbol_name}")
  endif()

endfunction()

function(yalibct_check_libc_struct_has_member struct_name member_name header_filenames macro_name)

  if (NOT DEFINED "${macro_name}")
    CHECK_STRUCT_HAS_MEMBER("${struct_name}" "${member_name}" "${header_filenames}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not looking for '${struct_name}::${member_name}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")

endfunction()

function(yalibct_check_libc_type_exists type_name header_filenames macro_name)

  if (NOT DEFINED "${macro_name}")
    CHECK_TYPE_EXISTS("${type_name}" "${header_filenames}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not looking for '${type_name}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")

endfunction()

function(yalibct_check_standard_libc_symbol symbol_name header_filenames macro_name error_controlling_macro_name standard_name)

  yalibct_check_libc_symbol("${symbol_name}" "${header_filenames}" ${macro_name})
  if (NOT "${error_controlling_macro_name}" AND "${${macro_name}}" AND NOT "${${macro_name}_DEFINED_ON_COMMAND_LINE}")
    message(SEND_ERROR "${standard_name} requires that ${symbol_name} be present, but it was not found on the system ! (note: define ${macro_name} to ON to suppress this error, or YALIBCT_DISABLE_MANDATING_${standard_name}_SYMBOLS to ON to suppress this error for every function of the ${standard_name} standard)")
  endif()

endfunction()

function(yalibct_check_standard_libc_type_exists type_name header_filenames macro_name error_controlling_macro_name standard_name)

  yalibct_check_libc_type_exists("${type_name}" "${header_filenames}" "${macro_name}")
  if (NOT "${error_controlling_macro_name}" AND "${${macro_name}}" AND NOT "${${macro_name}_DEFINED_ON_COMMAND_LINE}")
    message(SEND_ERROR "${standard_name} requires that ${type_name} be present, but it was not found on the system ! (note: define ${macro_name} to OFF to suppress this error, or YALIBCT_DISABLE_MANDATING_${standard_name}_SYMBOLS to ON to suppress this error for every function of the ${standard_name} standard)")
  endif()

endfunction()

function(yalibct_check_standard_libc_struct_has_member struct_name member_name header_filenames macro_name error_controlling_macro_name standard_name)

  yalibct_check_libc_struct_has_member("${struct_name}" "${member_name}" "${header_filenames}" "${macro_name}")
  if (NOT "${error_controlling_macro_name}" AND "${${macro_name}}" AND NOT "${${macro_name}_DEFINED_ON_COMMAND_LINE}")
    message(SEND_ERROR "${standard_name} requires that ${struct_name}::${member_name} be present, but it was not found on the system ! (note: define ${macro_name} to OFF to suppress this error, or YALIBCT_DISABLE_MANDATING_${standard_name}_SYMBOLS to ON to suppress this error for every function of the ${standard_name} standard)")
  endif()

endfunction()

function(yalibct_check_c23_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_C23_SYMBOLS}" "C23")
endfunction()

function(yalibct_check_c11_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_C11_SYMBOLS}" "C11")
endfunction()

function(yalibct_check_c99_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_C99_SYMBOLS}" "C99")
endfunction()

function(yalibct_check_c95_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_C95_SYMBOLS}" "C95")
endfunction()

function(yalibct_check_c89_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_C89_SYMBOLS}" "C89")
endfunction()

function(yalibct_check_posix_libc_symbol symbol_name header_filenames macro_name)
  yalibct_check_standard_libc_symbol("${symbol_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_POSIX_SYMBOLS}" "POSIX")
endfunction()

function(yalibct_check_posix_libc_struct_has_member struct_name member_name header_filenames macro_name)
  yalibct_check_standard_libc_struct_has_member("${struct_name}" "${member_name}" "${header_filenames}" "${macro_name}" "${YALIBCT_DISABLE_MANDATING_POSIX_SYMBOLS}" "POSIX")
endfunction()

function(yalibct_check_source_compiles code macro_name)

  if (NOT DEFINED "${macro_name}")
    check_c_source_compiles("${code}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not doing compile test '${macro_name}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")

endfunction()

function(yalibct_check_source_runs code macro_name)

  if (NOT DEFINED "${macro_name}")
    check_c_source_runs("${code}" "${macro_name}")
    yalibct_invert_check_cache_value("${macro_name}")
    set("${macro_name}_DEFINED_ON_COMMAND_LINE" "" CACHE INTERNAL "${macro_name}_DEFINED_ON_COMMAND_LINE")
  else()
    message(STATUS "Not doing run test '${macro_name}' because '${macro_name}' was already set to '${${macro_name}}'")
    yalibct_check_set_cache_value_from_command_line("${macro_name}")
  endif()

  yalibct_append_macro_to_compiler_flags_if_true("${macro_name}")

endfunction()

function(yalibct_make_executable target_name target_source_file)

  add_executable("${target_name}" "${target_source_file}")
  set_property(TARGET "${target_name}" PROPERTY C_STANDARD 23)
  target_include_directories("${target_name}"
    PRIVATE "${CMAKE_SOURCE_DIR}/include"
  )
  target_compile_definitions("${target_name}" PRIVATE "${YALIBCT_COMPILE_DEFINITIONS}")

  foreach(LOOP_LIB "${YALIBCT_WANTED_LIBRARIES}")
    target_link_libraries("${target_name}" PRIVATE "${LOOP_LIB}")
  endforeach()

  target_link_libraries("${target_name}" PRIVATE Threads::Threads)

endfunction()

yalibct_check_include_file(hedley.h YALIBCT_DOESNT_HAVE_SYSTEM_HEDLEY_H)
yalibct_check_include_file(obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_H)
yalibct_check_include_file(sys/cdefs.h YALIBCT_LIBC_DOESNT_HAVE_SYS_CDEFS_H)
yalibct_check_include_file(signal.h YALIBCT_LIBC_DOESNT_HAVE_SIGNAL_H)
yalibct_check_include_file(sys/mman.h YALIBCT_LIBC_DOESNT_HAVE_SYS_MMAN_H)
yalibct_check_include_file(sys/vfs.h YALIBCT_LIBC_DOESNT_HAVE_SYS_VFS_H)

yalibct_check_libc_symbol(vstrdupf string.h YALIBCT_LIBC_DOESNT_HAVE_VSTRDUPF)
yalibct_check_libc_symbol(memchr_inv string.h YALIBCT_LIBC_DOESNT_HAVE_MEMCHR_INV)
yalibct_check_c99_libc_symbol(NAN math.h YALIBCT_LIBC_DOESNT_HAVE_NAN)
yalibct_check_posix_libc_symbol(fcvt stdlib.h YALIBCT_LIBC_DOESNT_HAVE_FCVT)
yalibct_check_posix_libc_symbol(ecvt stdlib.h YALIBCT_LIBC_DOESNT_HAVE_ECVT)
yalibct_check_libc_symbol(xmalloc xalloc.h YALIBCT_LIBC_DOESNT_HAVE_XMALLOC)
yalibct_check_libc_symbol(error error.h YALIBCT_LIBC_DOESNT_HAVE_ERROR)
yalibct_check_libc_symbol(getprogname stdlib.h YALIBCT_LIBC_DOESNT_HAVE_GETPROGNAME)
yalibct_check_libc_symbol(program_invocation_short_name errno.h YALIBCT_LIBC_DOESNT_HAVE_PROGRAM_INVOCATION_SHORT_NAME)
yalibct_check_libc_symbol(program_invocation_name errno.h YALIBCT_LIBC_DOESNT_HAVE_PROGRAM_INVOCATION_NAME)
yalibct_check_libc_symbol(getexecname stdlib.h YALIBCT_LIBC_DOESNT_HAVE_GETEXECNAME)
yalibct_check_libc_symbol(__argv stdlib.h YALIBCT_LIBC_DOESNT_HAVE___ARGV)
yalibct_check_libc_symbol(__progname stdlib.h YALIBCT_LIBC_DOESNT_HAVE___PROGNAME)
yalibct_check_libc_symbol(mtrace mcheck.h YALIBCT_LIBC_DOESNT_HAVE_MTRACE)
yalibct_check_libc_symbol(mcheck_pedantic mcheck.h YALIBCT_LIBC_DOESNT_HAVE_MCHECK_PEDANTIC)
yalibct_check_libc_symbol(mcheck_check_all mcheck.h YALIBCT_LIBC_DOESNT_HAVE_MCHECK_CHECK_ALL)
yalibct_check_c95_libc_symbol(vswprintf "wchar.h;stdio.h" YALIBCT_LIBC_DOESNT_HAVE_VSWPRINTF)
yalibct_check_c95_libc_symbol(fwprintf "wchar.h;stdio.h" YALIBCT_LIBC_DOESNT_HAVE_FWPRINTF)
yalibct_check_c95_libc_symbol(swprintf "wchar.h;stdio.h" YALIBCT_LIBC_DOESNT_HAVE_SWPRINTF)
yalibct_check_c95_libc_symbol(vfwprintf "wchar.h;stdio.h" YALIBCT_LIBC_DOESNT_HAVE_VFWPRINTF)
yalibct_check_c99_libc_symbol(fesetround fenv.h YALIBCT_LIBC_DOESNT_HAVE_FESETROUND)
yalibct_check_c99_libc_symbol(INFINITY math.h YALIBCT_LIBC_DOESNT_HAVE_INFINITY)
yalibct_check_posix_libc_symbol(NL_ARGMAX limits.h YALIBCT_LIBC_DOESNT_HAVE_NL_ARGMAX)
yalibct_check_c11_libc_symbol(static_assert assert.h YALIBCT_LIBC_DOESNT_HAVE_STATIC_ASSERT)
yalibct_check_c99_libc_symbol(fegetround fenv.h YALIBCT_LIBC_DOESNT_HAVE_FEGETROUND)
yalibct_check_libc_symbol(printf_size printf.h YALIBCT_LIBC_DOESNT_HAVE_PRINTF_SIZE)
yalibct_check_libc_symbol(__builtin_printf stddef.h YALIBCT_LIBC_DOESNT_HAVE___BUILTIN_PRINTF)
yalibct_check_libc_symbol(__builtin_putchar stddef.h YALIBCT_LIBC_DOESNT_HAVE___BUILTIN_PUTCHAR)
yalibct_check_libc_symbol(__builtin_puts stddef.h YALIBCT_LIBC_DOESNT_HAVE___BUILTIN_PUTS)
yalibct_check_libc_symbol(__builtin_printf_unlocked stddef.h YALIBCT_LIBC_DOESNT_HAVE___BUILTIN_PRINTF_UNLOCKED)
yalibct_check_libc_symbol(printf_unlocked stdio.h YALIBCT_LIBC_DOESNT_HAVE_PRINTF_UNLOCKED)
yalibct_check_c89_libc_symbol(ldexp math.h YALIBCT_LIBC_DOESNT_HAVE_LDEXP)
yalibct_check_c89_libc_symbol(log math.h YALIBCT_LIBC_DOESNT_HAVE_LOG)
yalibct_check_c89_libc_symbol(pow math.h YALIBCT_LIBC_DOESNT_HAVE_POW)
yalibct_check_c89_libc_symbol(exp math.h YALIBCT_LIBC_DOESNT_HAVE_EXP)
yalibct_check_c89_libc_symbol(floor math.h YALIBCT_LIBC_DOESNT_HAVE_FLOOR)
yalibct_check_c89_libc_symbol(ldexp math.h YALIBCT_LIBC_DOESNT_HAVE_LDEXP)
yalibct_check_c89_libc_symbol(frexp math.h YALIBCT_LIBC_DOESNT_HAVE_FREXP)
yalibct_check_c95_libc_symbol(wcsncmp wchar.h YALIBCT_LIBC_DOESNT_HAVE_WCSNCMP)
yalibct_check_libc_symbol(alignalloc alignalloc.h YALIBCT_LIBC_DOESNT_HAVE_ALIGNALLOC)
yalibct_check_c23_libc_symbol(ckd_add stdckdint.h YALIBCT_LIBC_DOESNT_HAVE_CKD_ADD)
yalibct_check_c11_libc_symbol(alignof stdalign.h YALIBCT_LIBC_DOESNT_HAVE_ALIGNOF)
yalibct_check_libc_symbol(__builtin_abort stddef.h YALIBCT_LIBC_DOESNT_HAVE___BUILTIN_ABORT)
yalibct_check_libc_symbol(gettid unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETTID)
yalibct_check_libc_symbol(__STRING "sys/cdefs.h" YALIBCT_LIBC_DOESNT_HAVE___STRING)
yalibct_check_posix_libc_symbol(strnlen string.h YALIBCT_LIBC_DOESNT_HAVE_STRNLEN)
yalibct_check_c89_libc_symbol(memchr string.h YALIBCT_LIBC_DOESNT_HAVE_MEMCHR)
yalibct_check_posix_libc_symbol(vdprintf stdio.h YALIBCT_LIBC_DOESNT_HAVE_VDPRINTF)
yalibct_check_posix_libc_symbol(dprintf stdio.h YALIBCT_LIBC_DOESNT_HAVE_DPRINTF)
yalibct_check_libc_symbol(alloca alloca.h YALIBCT_LIBC_DOESNT_HAVE_ALLOCA)
yalibct_check_c99_libc_symbol(mbrtowc wchar.h YALIBCT_LIBC_DOESNT_HAVE_MBRTOWC)
yalibct_check_c99_libc_symbol(wcrtomb wchar.h YALIBCT_LIBC_DOESNT_HAVE_WCRTOMB)
yalibct_check_libc_symbol(full_write full-write.h YALIBCT_LIBC_DOESNT_HAVE_FULL_WRITE)
yalibct_check_libc_symbol(SYS_BUFSIZE_MAX sys-limits.h YALIBCT_LIBC_DOESNT_HAVE_SYS_BUFSIZE_MAX)
yalibct_check_posix_libc_symbol(siglongjmp setjmp.h YALIBCT_LIBC_DOESNT_HAVE_SIGLONGJMP)
yalibct_check_posix_libc_symbol(strsignal string.h YALIBCT_LIBC_DOESNT_HAVE_STRSIGNAL)
yalibct_check_libc_symbol(zerosize_ptr zerosize-ptr.h YALIBCT_LIBC_DOESNT_HAVE_ZEROSIZE_PTR)
yalibct_check_posix_libc_symbol(mmap "sys/mman.h" YALIBCT_LIBC_DOESNT_HAVE_MMAP)
yalibct_check_posix_libc_symbol(mprotect "sys/mman.h" YALIBCT_LIBC_DOESNT_HAVE_MPROTECT)
yalibct_check_c95_libc_symbol(wcscmp wchar.h YALIBCT_LIBC_DOESNT_HAVE_WCSCMP)
yalibct_check_posix_libc_symbol(open_memstream stdio.h YALIBCT_LIBC_DOESNT_HAVE_OPEN_MEMSTREAM)
yalibct_check_posix_libc_symbol(wcscasecmp wchar.h YALIBCT_LIBC_DOESNT_HAVE_WCSCASECMP)
yalibct_check_posix_libc_symbol(strcasecmp strings.h YALIBCT_LIBC_DOESNT_HAVE_STRCASECMP)
yalibct_check_libc_symbol(gettext libintl.h YALIBCT_LIBC_DOESNT_HAVE_GETTEXT)
yalibct_check_c89_libc_symbol(tmpnam stdio.h YALIBCT_LIBC_DOESNT_HAVE_TMPNAM)
yalibct_check_libc_symbol(MIN "sys/param.h" YALIBCT_LIBC_DOESNT_HAVE_MIN)
yalibct_check_libc_symbol(MAX "sys/param.h" YALIBCT_LIBC_DOESNT_HAVE_MAX)
yalibct_check_c99_libc_symbol(SCNdFAST16 inttypes.h YALIBCT_LIBC_DOESNT_HAVE_SCNDFAST16)
yalibct_check_c89_libc_symbol(fgetc stdio.h YALIBCT_LIBC_DOESNT_HAVE_FGETC)
yalibct_check_posix_libc_struct_has_member("struct stat" st_atim "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_STAT_ST_ATIM)
yalibct_check_posix_libc_struct_has_member("struct stat" st_mtim "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_STAT_ST_MTIM)
yalibct_check_posix_libc_struct_has_member("struct stat" st_ctim "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_STAT_ST_CTIM)
yalibct_check_libc_symbol(optreset unistd.h YALIBCT_LIBC_DOESNT_HAVE_OPTRESET)
yalibct_check_libc_symbol(fts_open fts.h YALIBCT_LIBC_DOESNT_HAVE_FTS_OPEN)
yalibct_check_libc_type_exists(FTS fts.h YALIBCT_LIBC_DOESNT_HAVE_FTS)
yalibct_check_libc_type_exists(FTSENT fts.h YALIBCT_LIBC_DOESNT_HAVE_FTSENT)
yalibct_check_libc_type_exists("struct stat64" "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_STAT64)
yalibct_check_posix_libc_symbol(O_SEARCH fcntl.h YALIBCT_LIBC_DOESNT_HAVE_O_SEARCH)
yalibct_check_libc_symbol(fts_read fts.h YALIBCT_LIBC_DOESNT_HAVE_FTS_READ)
yalibct_check_libc_type_exists(__fsword_t "sys/vfs.h" YALIBCT_LIBC_DOESNT_HAVE___FSWORD_T)
yalibct_check_libc_symbol(fstatfs "sys/vfs.h" YALIBCT_LIBC_DOESNT_HAVE_FSTATFS)
yalibct_check_libc_struct_has_member("struct statfs" f_type "sys/vfs.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_STATFS_F_TYPE)
yalibct_check_libc_struct_has_member("struct dirent" d_type "dirent.h" YALIBCT_LIBC_DOESNT_HAVE_STRUCT_DIRENT_D_TYPE)
yalibct_check_libc_symbol(fts_set fts.h YALIBCT_LIBC_DOESNT_HAVE_FTS_SET)
yalibct_check_libc_symbol(chflags unistd.h YALIBCT_LIBC_DOESNT_HAVE_CHFLAGS)
yalibct_check_libc_symbol(fts_close fts.h YALIBCT_LIBC_DOESNT_HAVE_FTS_CLOSE)
yalibct_check_posix_libc_symbol(UTIME_NOW "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_UTIME_NOW)
yalibct_check_posix_libc_symbol(UTIME_OMIT "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_UTIME_OMIT)
yalibct_check_c89_libc_symbol(fopen stdio.h YALIBCT_LIBC_DOESNT_HAVE_FOPEN)
yalibct_check_libc_symbol(mallopt malloc.h YALIBCT_LIBC_DOESNT_HAVE_MALLOPT)
yalibct_check_libc_symbol(M_PERTURB malloc.h YALIBCT_LIBC_DOESNT_HAVE_M_PERTURB)
yalibct_check_libc_type_exists("struct obstack" obstack.h YALIBCT_LIBC_DOESNT_HAVE_STRUCT_OBSTACK)
yalibct_check_libc_symbol(TEMP_FAILURE_RETRY unistd.h YALIBCT_LIBC_DOESNT_HAVE_TEMP_FAILURE_RETRY)
yalibct_check_libc_symbol(obstack_init obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_INIT)
yalibct_check_libc_symbol(obstack_printf stdio.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_PRINTF)
yalibct_check_libc_symbol(obstack_next_free obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_NEXT_FREE)
yalibct_check_libc_symbol(obstack_room obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_ROOM)
yalibct_check_libc_symbol(obstack_alloc_failed_handler obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_ALLOC_FAILED_HANDLER)
yalibct_check_libc_symbol(obstack_blank_fast obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_BLANK_FAST)
yalibct_check_libc_symbol(obstack_grow obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_GROW)
yalibct_check_libc_symbol(obstack_finish obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_FINISH)
yalibct_check_libc_symbol(fstat64 "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_FSTAT64)
yalibct_check_libc_symbol(getopt_long getopt.h YALIBCT_LIBC_DOESNT_HAVE_GETOPT_LONG)
yalibct_check_libc_type_exists("struct option" getopt.h YALIBCT_LIBC_DOESNT_HAVE_STRUCT_OPTION)
yalibct_check_posix_libc_symbol(optopt unistd.h YALIBCT_LIBC_DOESNT_HAVE_OPTOPT)
yalibct_check_posix_libc_symbol(optind unistd.h YALIBCT_LIBC_DOESNT_HAVE_OPTIND)
yalibct_check_posix_libc_symbol(opterr unistd.h YALIBCT_LIBC_DOESNT_HAVE_OPTERR)
yalibct_check_posix_libc_symbol(optarg unistd.h YALIBCT_LIBC_DOESNT_HAVE_OPTARG)
yalibct_check_libc_symbol(obstack_free obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_FREE)
yalibct_check_libc_symbol(obstack_alloc obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_ALLOC)
yalibct_check_libc_symbol(obstack_blank obstack.h YALIBCT_LIBC_DOESNT_HAVE_OBSTACK_BLANK)
yalibct_check_libc_symbol(statx "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_STATX)
yalibct_check_libc_symbol(open64 "fcntl.h" YALIBCT_LIBC_DOESNT_HAVE_OPEN64)
yalibct_check_c89_libc_symbol(L_tmpnam stdio.h YALIBCT_LIBC_DOESNT_HAVE_L_TMPNAM)
yalibct_check_libc_symbol(secure_getenv stdlib.h YALIBCT_LIBC_DOESNT_HAVE_SECURE_GETENV)
yalibct_check_libc_symbol(__secure_getenv stdlib.h YALIBCT_LIBC_DOESNT_HAVE___SECURE_GETENV)
yalibct_check_libc_symbol(issetugid unistd.h YALIBCT_LIBC_DOESNT_HAVE_ISSETUGID)
yalibct_check_posix_libc_symbol(getuid unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETUID)
yalibct_check_posix_libc_symbol(geteuid unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETEUID)
yalibct_check_posix_libc_symbol(getgid unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETGID)
yalibct_check_posix_libc_symbol(getegid unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETEGID)
yalibct_check_libc_symbol(P_tmpdir unistd.h YALIBCT_LIBC_DOESNT_HAVE_P_TMPDIR)
yalibct_check_libc_symbol(__glibc_unlikely "sys/cdefs.h" YALIBCT_LIBC_DOESNT_HAVE___GLIBC_UNLIKELY)
yalibct_check_libc_symbol(getrandom "sys/random.h" YALIBCT_LIBC_DOESNT_HAVE_GETRANDOM)
yalibct_check_libc_symbol(GRND_RANDOM "sys/random.h" YALIBCT_LIBC_DOESNT_HAVE_GRND_RANDOM)
yalibct_check_libc_symbol(GRND_NONBLOCK "sys/random.h" YALIBCT_LIBC_DOESNT_HAVE_GRND_NONBLOCK)
yalibct_check_posix_libc_symbol(CLOCK_REALTIME time.h YALIBCT_LIBC_DOESNT_HAVE_CLOCK_REALTIME)
yalibct_check_posix_libc_symbol(clock_gettime time.h YALIBCT_LIBC_DOESNT_HAVE_CLOCK_GETTIME)
yalibct_check_c99_libc_symbol(snprintf stdio.h YALIBCT_LIBC_DOESNT_HAVE_SNPRINTF)
yalibct_check_posix_libc_symbol(sbrk unistd.h YALIBCT_LIBC_DOESNT_HAVE_SBRK)
yalibct_check_libc_symbol(syscall "unistd.h;sys/syscall.h" YALIBCT_LIBC_DOESNT_HAVE_SYSCALL)
yalibct_check_posix_libc_symbol(getopt unistd.h YALIBCT_LIBC_DOESNT_HAVE_GETOPT)
yalibct_check_libc_symbol(no_argument getopt.h YALIBCT_LIBC_DOESNT_HAVE_NO_ARGUMENT)
yalibct_check_libc_symbol(required_argument getopt.h YALIBCT_LIBC_DOESNT_HAVE_REQUIRED_ARGUMENT)
yalibct_check_c89_libc_symbol(printf stdio.h YALIBCT_LIBC_DOESNT_HAVE_PRINTF)
yalibct_check_posix_libc_symbol(fstatat "sys/stat.h" YALIBCT_LIBC_DOESNT_HAVE_FSTATAT)
yalibct_check_libc_symbol(__GNUC_PREREQ "features.h" YALIBCT_LIBC_DOESNT_HAVE___GNUC_PREREQ)

yalibct_check_source_compiles(
  "
// Derived from code with this license:
/*
dnl Copyright (C) 2007-2022 Free Software Foundation, Inc.
dnl This file is free software; the Free Software Foundation
dnl gives unlimited permission to copy and/or distribute it,
dnl with or without modifications, as long as this notice is preserved.
*/
#include <float.h>
typedef int check[sizeof (long double) == sizeof (double)
                              && LDBL_MANT_DIG == DBL_MANT_DIG
                              && LDBL_MAX_EXP == DBL_MAX_EXP
                              && LDBL_MIN_EXP == DBL_MIN_EXP
                              ? 1 : -1];

int main(){}
  "
  YALIBCT_LIBC_DOESNT_HAVE_SAME_LONG_DOUBLE_AS_DOUBLE
)
yalibct_check_source_compiles(
  "
#include <stddef.h>
void *__memcpy_chk(void *dest, const void *src, size_t len, size_t destlen);
void *memcpy_chk_ptr = __memcpy_chk;

int main(){return !memcpy_chk_ptr;}
  "
  YALIBCT_LIBC_DOESNT_HAVE___MEMCPY_CHK
)

# Disabled for now - add once we find another implementation that actually does this (note: needs to be conditioned on standardness too given this is obviously non-compliant behavior we're testing for here)
if(0)

yalibct_check_source_compiles(
  "
#include <signal.h>
int check[] = {
  SIGABRT,
  SIGFPE,
  SIGILL,
  SIGINT,
  SIGSEGV,
  SIGTERM,
#ifdef SIGBUS
  SIGBUS,
#endif
 };

int main(){}
  "
  YALIBCT_LIBC_DOESNT_HAVE_ACTUALLY_CONSTANT_SIGNAL_CONSTANTS
)

endif()

yalibct_check_source_compiles(
  "
// Derived from code with this license:
/*
dnl Copyright 2020-2023 Free Software Foundation, Inc.
dnl This file is free software; the Free Software Foundation
dnl gives unlimited permission to copy and/or distribute it,
dnl with or without modifications, as long as this notice is preserved.
*/

#include <windows.h>
#if !(_WIN32_WINNT >= _WIN32_WINNT_WIN7)
  cannot assume it
#endif
  "
  YALIBCT_LIBC_DOESNT_HAVE_LIB_BCRYPT
)

yalibct_make_executable(libc-starts-up tests/libc-starts-up.c)

yalibct_make_executable(printf-KOS-mk4-test-positional tests/printf/KOS-mk4-test-positional.c)
yalibct_make_executable(printf-linux-kernel-test tests/printf/linux-kernel-test.c)
yalibct_make_executable(printf-NetBSD-t tests/printf/NetBSD-t.c)
yalibct_make_executable(printf-FreeBSD-printfloat_test tests/printf/FreeBSD-printfloat_test.c)
yalibct_make_executable(printf-FreeBSD-atf_test tests/printf/FreeBSD-atf_test.c)
yalibct_make_executable(printf-FreeBSD-plain_test tests/printf/FreeBSD-plain_test.c)
yalibct_make_executable(printf-FreeBSD-tap_test tests/printf/FreeBSD-tap_test.c)
yalibct_make_executable(printf-fuchsia-tests tests/printf/fuchsia-tests.c)
yalibct_make_executable(printf-illumos-gate-6961 tests/printf/illumos-gate-6961.c)
yalibct_make_executable(printf-illumos-gate-9511 tests/printf/illumos-gate-9511.c)
yalibct_make_executable(printf-reactos tests/printf/reactos.c)
yalibct_make_executable(printf-littlekernel-tests tests/printf/littlekernel-tests.c)
yalibct_make_executable(printf-toaruos-test tests/printf/toaruos-test.c)
yalibct_make_executable(printf-newsys-test tests/printf/newsys-test.c)
yalibct_make_executable(printf-osv-tst tests/printf/osv-tst.c)
yalibct_make_executable(printf-OpenBSD-fp tests/printf/OpenBSD-fp.c)
yalibct_make_executable(printf-OpenBSD-int tests/printf/OpenBSD-int.c)
yalibct_make_executable(printf-OpenBSD-string tests/printf/OpenBSD-string.c)
yalibct_make_executable(printf-llvm-project-test tests/printf/llvm-project-test.c)
yalibct_make_executable(printf-gcc tests/printf/gcc.c)
yalibct_make_executable(printf-gcc-1 tests/printf/gcc-1.c)
yalibct_make_executable(printf-gcc-2 tests/printf/gcc-2.c)
yalibct_make_executable(printf-llvm-test-suite-2002-04-17-Char tests/printf/llvm-test-suite-2002-04-17-Char.c)
yalibct_make_executable(printf-tcc-02 tests/printf/tcc-02.c)
yalibct_make_executable(printf-wine-msvcrt tests/printf/wine-msvcrt.c)
yalibct_make_executable(printf-wine-ucrtbase tests/printf/wine-ucrtbase.c)
yalibct_make_executable(printf-glibc-tst-binary tests/printf/glibc-tst-binary.c)
yalibct_make_executable(printf-glibc-tst-ob tests/printf/glibc-tst-ob.c)
yalibct_make_executable(printf-glibc-tst-bz18872-sh-output tests/printf/glibc-tst-bz18872-sh-output.c)
yalibct_make_executable(printf-glibc-tst-bz25691 tests/printf/glibc-tst-bz25691.c)
yalibct_make_executable(printf-glibc-tst-fp-free tests/printf/glibc-tst-fp-free.c)
yalibct_make_executable(printf-glibc-tst-fp-leak tests/printf/glibc-tst-fp-leak.c)
yalibct_make_executable(printf-glibc-tst-round tests/printf/glibc-tst-round.c)
yalibct_make_executable(printf-glibc-tst tests/printf/glibc-tst.c)
yalibct_make_executable(printf-glibc-tst-sz-islongdouble tests/printf/glibc-tst-sz-islongdouble.c)
yalibct_make_executable(printf-glibc-tst-sz tests/printf/glibc-tst-sz.c)
yalibct_make_executable(printf-glibc-tst-wc tests/printf/glibc-tst-wc.c)
yalibct_make_executable(printf-glibc-test-ldbl-compat tests/printf/glibc-test-ldbl-compat.c)
yalibct_make_executable(printf-glibc-tst-ldbl-nonnormal tests/printf/glibc-tst-ldbl-nonnormal.c)
yalibct_make_executable(printf-newlib-nul tests/printf/newlib-nul.c)
yalibct_make_executable(printf-picolibc-nul tests/printf/picolibc-nul.c)
yalibct_make_executable(printf-picolibc-tests tests/printf/picolibc-tests.c)
yalibct_make_executable(printf-picolibc-scanf tests/printf/picolibc-scanf.c)
yalibct_make_executable(printf-dietlibc2 tests/printf/dietlibc2.c)
yalibct_make_executable(printf-dietlibc tests/printf/dietlibc.c)
yalibct_make_executable(printf-dietlibctest tests/printf/dietlibctest.c)
yalibct_make_executable(printf-cloudlibc-scanf_test tests/printf/cloudlibc-scanf_test.c)
yalibct_make_executable(printf-dklibc-test tests/printf/dklibc-test.c)
yalibct_make_executable(printf-avr-libc-bug-35366-2_flt tests/printf/avr-libc-bug-35366-2_flt.c)
yalibct_make_executable(printf-libc-test-1e9-oob tests/printf/libc-test-1e9-oob.c)
yalibct_make_executable(printf-libc-test-fmt-g-round tests/printf/libc-test-fmt-g-round.c)
yalibct_make_executable(printf-libc-test-fmt-g-zeros tests/printf/libc-test-fmt-g-zeros.c)
yalibct_make_executable(printf-libc-test-fmt-n tests/printf/libc-test-fmt-n.c)
yalibct_make_executable(printf-gnulib-test-posix tests/printf/gnulib-test-posix.c)
yalibct_make_executable(printf-gnulib-test-posix2 tests/printf/gnulib-test-posix2.c)
yalibct_make_executable(printf-pdclib tests/printf/pdclib.c)
yalibct_make_executable(printf-gnulib-sizes-c99 tests/printf/gnulib-sizes-c99.c)
yalibct_make_executable(printf-gnulib-directive-a tests/printf/gnulib-directive-a.c)
yalibct_make_executable(printf-gnulib-directive-f tests/printf/gnulib-directive-f.c)
yalibct_make_executable(printf-gnulib-directive-ls tests/printf/gnulib-directive-ls.c)
yalibct_make_executable(printf-gnulib-directive-n tests/printf/gnulib-directive-n.c)
yalibct_make_executable(printf-gnulib-enomem tests/printf/gnulib-enomem.c)
yalibct_make_executable(printf-gnulib-flag-grouping tests/printf/gnulib-flag-grouping.c)
yalibct_make_executable(printf-gnulib-flag-leftadjust tests/printf/gnulib-flag-leftadjust.c)
yalibct_make_executable(printf-gnulib-flag-zero tests/printf/gnulib-flag-zero.c)
yalibct_make_executable(printf-gnulib-infinite tests/printf/gnulib-infinite.c)
yalibct_make_executable(printf-gnulib-infinite-long-double tests/printf/gnulib-infinite-long-double.c)
yalibct_make_executable(printf-gnulib-long-double tests/printf/gnulib-long-double.c)
yalibct_make_executable(printf-gnulib-positions tests/printf/gnulib-positions.c)
yalibct_make_executable(printf-gnulib-precision tests/printf/gnulib-precision.c)
yalibct_make_executable(printf-gnulib-sn-directive-n tests/printf/gnulib-sn-directive-n.c)
yalibct_make_executable(printf-gnulib-sn-retval-c99 tests/printf/gnulib-sn-retval-c99.c)
yalibct_make_executable(printf-gnulib-sn-size1 tests/printf/gnulib-sn-size1.c)
yalibct_make_executable(printf-gnulib-sn-truncation-c99 tests/printf/gnulib-sn-truncation-c99.c)
yalibct_make_executable(printf-gnulib-vsn-zerosize-c99 tests/printf/gnulib-vsn-zerosize-c99.c)
yalibct_make_executable(printf-mpaland-test_suite tests/printf/mpaland-test_suite.c)
yalibct_make_executable(printf-duktape-test tests/printf/duktape-test.c)
yalibct_make_executable(printf-cosmopolitan-kprintf_test tests/printf/cosmopolitan-kprintf_test.c)
yalibct_make_executable(printf-libcmini_formatting-1 tests/printf/libcmini_formatting-1.c)
yalibct_make_executable(printf-libcmini_formatting-2 tests/printf/libcmini_formatting-2.c)
yalibct_make_executable(printf-libcmini_formatting-3 tests/printf/libcmini_formatting-3.c)
yalibct_make_executable(printf-libcmini_formatting-4 tests/printf/libcmini_formatting-4.c)
yalibct_make_executable(printf-libcmini_formatting-5 tests/printf/libcmini_formatting-5.c)
yalibct_make_executable(printf-cosmopolitan-uppercase-e-static-yoink-test tests/printf/cosmopolitan-uppercase-e-static-yoink-test.c)
yalibct_make_executable(printf-cosmopolitan-uppercase-f-static-yoink-test tests/printf/cosmopolitan-uppercase-f-static-yoink-test.c)
yalibct_make_executable(printf-cosmopolitan-uppercase-g-static-yoink-test tests/printf/cosmopolitan-uppercase-g-static-yoink-test.c)
yalibct_make_executable(printf-nanoprintf-conformance tests/printf/nanoprintf-conformance.c)
yalibct_make_executable(printf-nanoprintf-unit_binary tests/printf/nanoprintf-unit_binary.c)
yalibct_make_executable(printf-glibc-tst-bz25691-musl-regression tests/printf/glibc-tst-bz25691-musl-regression.c)

yalibct_make_executable(strcat-NetBSD-t tests/strcat/NetBSD-t.c)
yalibct_make_executable(strcat-llvm-project-test tests/strcat/llvm-project-test.c)
yalibct_make_executable(strcat-gcc tests/strcat/gcc.c)
yalibct_make_executable(strcat-cc65-lib_common tests/strcat/cc65-lib_common.c)
yalibct_make_executable(strcat-scc-0011 tests/strcat/scc-0011.c)
yalibct_make_executable(strcat-glibc-test tests/strcat/glibc-test.c)
yalibct_make_executable(strcat-cosmopolitan-test tests/strcat/cosmopolitan-test.c)
yalibct_make_executable(strcat-cloudlibc-test tests/strcat/cloudlibc-test.c)
yalibct_make_executable(strcat-gnulib-test-u8 tests/strcat/gnulib-test-u8.c)
yalibct_make_executable(strcat-pdclib tests/strcat/pdclib.c)
yalibct_make_executable(strcat-embeddedartistry-libc tests/strcat/embeddedartistry-libc.c)

yalibct_make_executable(strlen-linux-kernel tests/strlen/linux-kernel.c)
yalibct_make_executable(strlen-open-posix-testsuite-1-1 tests/strlen/open-posix-testsuite-1-1.c)
yalibct_make_executable(strlen-NetBSD-t tests/strlen/NetBSD-t.c)
yalibct_make_executable(strlen-arm-optimized-routines tests/strlen/arm-optimized-routines.c)
yalibct_make_executable(strlen-reactos-crt tests/strlen/reactos-crt.c)
yalibct_make_executable(strlen-llvm-project-test tests/strlen/llvm-project-test.c)
yalibct_make_executable(strlen-embeddedartistry-libc tests/strlen/embeddedartistry-libc.c)
yalibct_make_executable(strlen-gcc-builtins-2 tests/strlen/gcc-builtins-2.c)
yalibct_make_executable(strlen-gcc-builtins-3 tests/strlen/gcc-builtins-3.c)
yalibct_make_executable(strlen-gcc-builtins tests/strlen/gcc-builtins.c)
yalibct_make_executable(strlen-gcc-execute-1 tests/strlen/gcc-execute-1.c)
yalibct_make_executable(strlen-gcc-execute-2 tests/strlen/gcc-execute-2.c)
yalibct_make_executable(strlen-gcc-execute-3 tests/strlen/gcc-execute-3.c)
yalibct_make_executable(strlen-gcc-execute-4 tests/strlen/gcc-execute-4.c)
yalibct_make_executable(strlen-gcc-execute-5 tests/strlen/gcc-execute-5.c)
yalibct_make_executable(strlen-gcc-execute-6 tests/strlen/gcc-execute-6.c)
yalibct_make_executable(strlen-gcc-execute-7 tests/strlen/gcc-execute-7.c)
yalibct_make_executable(strlen-gcc-opt-10 tests/strlen/gcc-opt-10.c)
yalibct_make_executable(strlen-gcc-opt-11 tests/strlen/gcc-opt-11.c)
yalibct_make_executable(strlen-gcc-opt-12 tests/strlen/gcc-opt-12.c)
yalibct_make_executable(strlen-gcc-opt-12g tests/strlen/gcc-opt-12g.c)
yalibct_make_executable(strlen-gcc-opt-13 tests/strlen/gcc-opt-13.c)
yalibct_make_executable(strlen-gcc-opt-14g tests/strlen/gcc-opt-14g.c)
yalibct_make_executable(strlen-gcc-opt-14gf tests/strlen/gcc-opt-14gf.c)
yalibct_make_executable(strlen-gcc-opt-15 tests/strlen/gcc-opt-15.c)
yalibct_make_executable(strlen-gcc-opt-16g tests/strlen/gcc-opt-16g.c)
yalibct_make_executable(strlen-gcc-opt-17g tests/strlen/gcc-opt-17g.c)
yalibct_make_executable(strlen-gcc-opt-18g tests/strlen/gcc-opt-18g.c)
yalibct_make_executable(strlen-gcc-opt-19 tests/strlen/gcc-opt-19.c)
yalibct_make_executable(strlen-gcc-opt-1 tests/strlen/gcc-opt-1.c)
yalibct_make_executable(strlen-gcc-opt-1f tests/strlen/gcc-opt-1f.c)
yalibct_make_executable(strlen-gcc-opt-20 tests/strlen/gcc-opt-20.c)
yalibct_make_executable(strlen-gcc-opt-21 tests/strlen/gcc-opt-21.c)
yalibct_make_executable(strlen-gcc-opt-22 tests/strlen/gcc-opt-22.c)
yalibct_make_executable(strlen-gcc-opt-22g tests/strlen/gcc-opt-22g.c)
yalibct_make_executable(strlen-gcc-opt-23 tests/strlen/gcc-opt-23.c)
yalibct_make_executable(strlen-gcc-opt-24 tests/strlen/gcc-opt-24.c)
yalibct_make_executable(strlen-gcc-opt-25 tests/strlen/gcc-opt-25.c)
yalibct_make_executable(strlen-gcc-opt-26 tests/strlen/gcc-opt-26.c)
yalibct_make_executable(strlen-gcc-opt-27 tests/strlen/gcc-opt-27.c)
yalibct_make_executable(strlen-gcc-opt-28 tests/strlen/gcc-opt-28.c)
yalibct_make_executable(strlen-gcc-opt-29 tests/strlen/gcc-opt-29.c)
yalibct_make_executable(strlen-gcc-opt-2 tests/strlen/gcc-opt-2.c)
yalibct_make_executable(strlen-gcc-opt-2f tests/strlen/gcc-opt-2f.c)
yalibct_make_executable(strlen-gcc-opt-31 tests/strlen/gcc-opt-31.c)
yalibct_make_executable(strlen-gcc-opt-31g tests/strlen/gcc-opt-31g.c)
yalibct_make_executable(strlen-gcc-opt-32 tests/strlen/gcc-opt-32.c)
yalibct_make_executable(strlen-gcc-opt-33 tests/strlen/gcc-opt-33.c)
yalibct_make_executable(strlen-gcc-opt-33g tests/strlen/gcc-opt-33g.c)
yalibct_make_executable(strlen-gcc-opt-34 tests/strlen/gcc-opt-34.c)
yalibct_make_executable(strlen-gcc-opt-35 tests/strlen/gcc-opt-35.c)
yalibct_make_executable(strlen-gcc-opt-3 tests/strlen/gcc-opt-3.c)
yalibct_make_executable(strlen-gcc-opt-46 tests/strlen/gcc-opt-46.c)
yalibct_make_executable(strlen-gcc-opt-4 tests/strlen/gcc-opt-4.c)
yalibct_make_executable(strlen-gcc-opt-4g tests/strlen/gcc-opt-4g.c)
yalibct_make_executable(strlen-gcc-opt-4gf tests/strlen/gcc-opt-4gf.c)
yalibct_make_executable(strlen-gcc-opt-5 tests/strlen/gcc-opt-5.c)
yalibct_make_executable(strlen-gcc-opt-63 tests/strlen/gcc-opt-63.c)
yalibct_make_executable(strlen-gcc-opt-64 tests/strlen/gcc-opt-64.c)
yalibct_make_executable(strlen-gcc-opt-66 tests/strlen/gcc-opt-66.c)
yalibct_make_executable(strlen-gcc-opt-68 tests/strlen/gcc-opt-68.c)
yalibct_make_executable(strlen-gcc-opt-6 tests/strlen/gcc-opt-6.c)
yalibct_make_executable(strlen-gcc-opt-71 tests/strlen/gcc-opt-71.c)
yalibct_make_executable(strlen-gcc-opt-74 tests/strlen/gcc-opt-74.c)
yalibct_make_executable(strlen-gcc-opt-75 tests/strlen/gcc-opt-75.c)
yalibct_make_executable(strlen-gcc-opt-76 tests/strlen/gcc-opt-76.c)
yalibct_make_executable(strlen-gcc-opt-79 tests/strlen/gcc-opt-79.c)
yalibct_make_executable(strlen-gcc-opt-7 tests/strlen/gcc-opt-7.c)
yalibct_make_executable(strlen-gcc-opt-81 tests/strlen/gcc-opt-81.c)
yalibct_make_executable(strlen-gcc-opt-84 tests/strlen/gcc-opt-84.c)
yalibct_make_executable(strlen-gcc-opt-87 tests/strlen/gcc-opt-87.c)
yalibct_make_executable(strlen-gcc-opt-88 tests/strlen/gcc-opt-88.c)
yalibct_make_executable(strlen-gcc-opt-8 tests/strlen/gcc-opt-8.c)
yalibct_make_executable(strlen-gcc-opt-92 tests/strlen/gcc-opt-92.c)
yalibct_make_executable(strlen-gcc-opt-94 tests/strlen/gcc-opt-94.c)
yalibct_make_executable(strlen-gcc-opt-9 tests/strlen/gcc-opt-9.c)
yalibct_make_executable(strlen-gcc-ldist-1 tests/strlen/gcc-ldist-1.c)
yalibct_make_executable(strlen-gcc-ldist-2 tests/strlen/gcc-ldist-2.c)
yalibct_make_executable(strlen-scc-0018 tests/strlen/scc-0018.c)
yalibct_make_executable(strlen-glibc-test tests/strlen/glibc-test.c)
yalibct_make_executable(strlen-glibc-tst tests/strlen/glibc-tst.c)
yalibct_make_executable(strlen-glibc-tst-rsi tests/strlen/glibc-tst-rsi.c)
yalibct_make_executable(strlen-cosmopolitan-test tests/strlen/cosmopolitan-test.c)
yalibct_make_executable(strlen-nlibc tests/strlen/nlibc.c)
yalibct_make_executable(strlen-cloudlibc tests/strlen/cloudlibc.c)
yalibct_make_executable(strlen-dietlibc tests/strlen/dietlibc.c)
yalibct_make_executable(strlen-gnulib-test-u8 tests/strlen/gnulib-test-u8.c)

yalibct_make_executable(isdigit-llvm-project-test tests/isdigit/llvm-project-test.c)
yalibct_make_executable(isdigit-avr-libc-1 tests/isdigit/avr-libc-1.c)
yalibct_make_executable(isdigit-open-watcom-v2 tests/isdigit/open-watcom-v2.c)
yalibct_make_executable(isdigit-z88dk tests/isdigit/z88dk.c)
yalibct_make_executable(isdigit-embeddedartistry-libc tests/isdigit/embeddedartistry-libc.c)
yalibct_make_executable(isdigit-pdclib tests/isdigit/pdclib.c)

yalibct_make_executable(isalpha-llvm-project-test tests/isalpha/llvm-project-test.c)
yalibct_make_executable(isalpha-z88dk-test tests/isalpha/z88dk-test.c)
yalibct_make_executable(isalpha-avr-libc-1 tests/isalpha/avr-libc-1.c)
yalibct_make_executable(isalpha-embeddedartistry-libc tests/isalpha/embeddedartistry-libc.c)
yalibct_make_executable(isalpha-pdclib tests/isalpha/pdclib.c)

yalibct_make_executable(putchar-pdclib tests/putchar/pdclib.c)

yalibct_make_executable(strcmp-NetBSD-t tests/strcmp/NetBSD-t.c)
yalibct_make_executable(strcmp-llvm-project-test tests/strcmp/llvm-project-test.c)
yalibct_make_executable(strcmp-gcc-builtins tests/strcmp/gcc-builtins.c)
yalibct_make_executable(strcmp-gcc-execute-1 tests/strcmp/gcc-execute-1.c)
yalibct_make_executable(strcmp-gcc-dg-1 tests/strcmp/gcc-dg-1.c)
yalibct_make_executable(strcmp-gcc-dg-opt_1 tests/strcmp/gcc-dg-opt_1.c)
yalibct_make_executable(strcmp-gcc-dg-opt_2 tests/strcmp/gcc-dg-opt_2.c)
yalibct_make_executable(strcmp-gcc-dg-opt_3 tests/strcmp/gcc-dg-opt_3.c)
yalibct_make_executable(strcmp-gcc-dg-opt_5 tests/strcmp/gcc-dg-opt_5.c)
yalibct_make_executable(strcmp-gcc-dg-opt_6 tests/strcmp/gcc-dg-opt_6.c)
yalibct_make_executable(strcmp-gcc-dg-opt_9 tests/strcmp/gcc-dg-opt_9.c)
yalibct_make_executable(strcmp-gcc-dg-opt_12 tests/strcmp/gcc-dg-opt_12.c)
yalibct_make_executable(strcmp-z88dk tests/strcmp/z88dk.c)
yalibct_make_executable(strcmp-scc-0013 tests/strcmp/scc-0013.c)
yalibct_make_executable(strcmp-glibc-test tests/strcmp/glibc-test.c)
yalibct_make_executable(strcmp-cosmopolitan-test tests/strcmp/cosmopolitan-test.c)
yalibct_make_executable(strcmp-newlib-1 tests/strcmp/newlib-1.c)
yalibct_make_executable(strcmp-nlibc tests/strcmp/nlibc.c)
yalibct_make_executable(strcmp-cloudlibc-test tests/strcmp/cloudlibc-test.c)
yalibct_make_executable(strcmp-avr-libc tests/strcmp/avr-libc.c)
yalibct_make_executable(strcmp-arm-optimized-routines tests/strcmp/arm-optimized-routines.c)
yalibct_make_executable(strcmp-embeddedartistry-libc tests/strcmp/embeddedartistry-libc.c)
yalibct_make_executable(strcmp-pdclib tests/strcmp/pdclib.c)
yalibct_make_executable(strcmp-libcmini tests/strcmp/libcmini.c)
yalibct_make_executable(strcmp-llvm-project_fuzz tests/strcmp/llvm-project_fuzz.c)
yalibct_make_executable(strcmp-compilerai-bug-reports-dietlibc_fast_correct tests/strcmp/compilerai-bug-reports-dietlibc_fast_correct.c)

yalibct_make_executable(stat-llvm-project_test tests/stat/llvm-project_test.c)
yalibct_make_executable(stat-binutils-1 tests/stat/binutils-1.c)
yalibct_make_executable(stat-binutils-2 tests/stat/binutils-2.c)
yalibct_make_executable(stat-binutils-3 tests/stat/binutils-3.c)
yalibct_make_executable(stat-binutils-4 tests/stat/binutils-4.c)
yalibct_make_executable(stat-binutils-5 tests/stat/binutils-5.c)
yalibct_make_executable(stat-cygwin-01 tests/stat/cygwin-01.c)
yalibct_make_executable(stat-cygwin-02 tests/stat/cygwin-02.c)
yalibct_make_executable(stat-cygwin-03 tests/stat/cygwin-03.c)
yalibct_make_executable(stat-cygwin-05 tests/stat/cygwin-05.c)
yalibct_make_executable(stat-cygwin-06 tests/stat/cygwin-06.c)
yalibct_make_executable(stat-valgrind tests/stat/valgrind.c)
yalibct_make_executable(stat-gvisor tests/stat/gvisor.c)
yalibct_make_executable(stat-gvisor_times_part1 tests/stat/gvisor_times_part1.c)
yalibct_make_executable(stat-gvisor_times_part2 tests/stat/gvisor_times_part2.c)
yalibct_make_executable(stat-gvisor_times_part3 tests/stat/gvisor_times_part3.c)
yalibct_make_executable(stat-gvisor_times_part4 tests/stat/gvisor_times_part4.c)
yalibct_make_executable(stat-gvisor_times_part5 tests/stat/gvisor_times_part5.c)
yalibct_make_executable(stat-gvisor_times_part6 tests/stat/gvisor_times_part6.c)
yalibct_make_executable(stat-linux-test-project-01 tests/stat/linux-test-project-01.c)
yalibct_make_executable(stat-linux-test-project-02 tests/stat/linux-test-project-02.c)
yalibct_make_executable(stat-NetBSD-t tests/stat/NetBSD-t.c)
yalibct_make_executable(stat-glibc-test tests/stat/glibc-test.c)
yalibct_make_executable(stat-glibc-test-2 tests/stat/glibc-test-2.c)
yalibct_make_executable(stat-glibc-tst-time64 tests/stat/glibc-tst-time64.c)
yalibct_make_executable(stat-glibc-tst tests/stat/glibc-tst.c)
yalibct_make_executable(stat-cosmopolitan_test tests/stat/cosmopolitan_test.c)
yalibct_make_executable(stat-dietlibc tests/stat/dietlibc.c)
yalibct_make_executable(stat-libc-test tests/stat/libc-test.c)
yalibct_make_executable(stat-gnulib tests/stat/gnulib.c)
