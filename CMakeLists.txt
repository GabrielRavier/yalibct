cmake_minimum_required(VERSION 3.4)

project(yalibct
  VERSION 0.1
  DESCRIPTION "Yet another libc testsuite - Tests whatever libc it is run under"
  LANGUAGES C
)

option(YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT "If this is set to ON, then none of the optional tests will be run by default, i.e. without the corresponding options being explicitly set" OFF)

option(YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the C89 standard will be run by default" ${YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %c will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_T_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %t will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_PRECISION_TESTS "Whether or not tests that depend on the printf family of functions supporting %.<num> will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_HH_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %hh will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_0_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %0 will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %f will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_N_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %n will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_HASH_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %# will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_L_LENGTH_MODIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %L will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_G_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %g/%G will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_E_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %e/%E will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})

option(YALIBCT_DISABLE_C95_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the C95 standard will be run by default" ${YALIBCT_DISABLE_C89_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_MANDATING_C95_SYMBOLS "Whether or not we should error when we're told a C95 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_HAS_ option" ${YALIBCT_DISABLE_C95_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %lc will be run by default" ${YALIBCT_DISABLE_C95_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %ls will be run by default" ${YALIBCT_DISABLE_C95_TESTS_BY_DEFAULT})

option(YALIBCT_DISABLE_C99_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the C99 standard will be run by default" ${YALIBCT_DISABLE_C95_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_MANDATING_C99_SYMBOLS "Whether or not we should error when we're told a C99 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_HAS_ option" ${YALIBCT_DISABLE_C99_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_A_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %a/%A will be run by default" ${YALIBCT_DISABLE_C99_TESTS_BY_DEFAULT})

option(YALIBCT_DISABLE_C11_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the C11 standard will be run by default" ${YALIBCT_DISABLE_C99_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_MANDATING_C11_SYMBOLS "Whether or not we should error when we're told a C11 symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_HAS_ option" ${YALIBCT_DISABLE_C11_TESTS_BY_DEFAULT})

option(YALIBCT_DISABLE_C2X_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the upcoming C2x standard will be run by default" ${YALIBCT_DISABLE_C11_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_B_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %b/%B will be run by default" ${YALIBCT_DISABLE_C2X_TESTS_BY_DEFAULT})

option(YALIBCT_DISABLE_POSIX_TESTS_BY_DEFAULT "If this is set to OFF, then none of the optional tests that depend on the POSIX standard will be run by default" ${YALIBCT_DISABLE_C99_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_MANDATING_POSIX_SYMBOLS "Whether or not we should error when we're told a POSIX symbol is not available. Can be suppressed through explicit definition of the corresponding YALIBCT_LIBC_HAS_ option" ${YALIBCT_DISABLE_POSIX_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_APOSTROPHE_FLAG_TESTS "Whether or not tests that depend on the printf family of functions supporting %' will be run by default" ${YALIBCT_DISABLE_POSIX_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_C_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %C will be run by default" ${YALIBCT_DISABLE_POSIX_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_PRINTF_UPPERCASE_S_CONVERSION_SPECIFIER_TESTS "Whether or not tests that depend on the printf family of functions supporting %S will be run by default" ${YALIBCT_DISABLE_POSIX_TESTS_BY_DEFAULT})

# Misc tests that aren't part of any standard but are commonly supported
option(YALIBCT_DISABLE_PRINTF_NUMBERED_ARGUMENTS_TESTS "Whether or not tests that depend on the printf family of functions supporting numbered argument conversion specifications (i.e. %n$) will be run" ${YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS "Whether or not tests that depend on any locales that aren't defined by the standard that the implementation might lie about supporting (as effectively allowed by the standard saying that non-standard locale names have unspecified behavior) will be run" ${YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_RARE_LOCALE_TESTS "Whether or not tests that depend on rare locales that the implementation might lie about supporting (as effectively allowed by the standard saying that non-standard locale names have unspecified behavior) will be run" ${YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS})
option(YALIBCT_DISABLE_PRINTF_ROUNDING_DIRECTION_TESTS "Whether or not tests that depend on the printf family of functions rounding floating point numbers properly will be run. I am unsure of whether the C standard requires this, but it seems like a very useful property for the functions to have regardless" ${YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT})
option(YALIBCT_DISABLE_LC_NUMERIC_TESTS "Whether or not tests that depend on LC_NUMERIC support being present will be run" ${YALIBCT_DISABLE_OPTIONAL_TESTS_BY_DEFAULT})

include(CheckIncludeFile)
include(CheckSymbolExists)
include(CheckLinkerFlag)

if (NOT DEFINED YALIBCT_COMPILE_DEFINITIONS)
  set(YALIBCT_COMPILE_DEFINITIONS "-D_GNU_SOURCE" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")
endif()

set(YALIBCT_POTENTIALLY_WANTED_LIBRARIES m;compat)

foreach(YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR ${YALIBCT_POTENTIALLY_WANTED_LIBRARIES})
  check_linker_flag(C -l${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR} YALIBCT_HAS_LIBRARY_${YALIBCT_POTENTIALLY_WANTED_LIBRARIES_LOOP_VAR})
endforeach()

function(yalibct_append_macro_to_compiler_flags macro_name)

  if (${macro_name})
    list(APPEND YALIBCT_COMPILE_DEFINITIONS ${macro_name})
    set(YALIBCT_COMPILE_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")
  endif()

endfunction()

function(yalibct_check_include_file include_filename macro_name)

  CHECK_INCLUDE_FILE(${include_filename} ${macro_name})
  yalibct_append_macro_to_compiler_flags("${macro_name}")

endfunction()

function(yalibct_check_libc_symbol symbol_name include_filename macro_name)

  list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)
  foreach(LOOP_LIB ${YALIBCT_POTENTIALLY_WANTED_LIBRARIES})
    if (YALIBCT_HAS_LIBRARY_${LOOP_LIB})
      list(APPEND CMAKE_REQUIRED_LIBRARIES ${LOOP_LIB})
    endif()
  endforeach()
  check_symbol_exists(${symbol_name} ${include_filename} ${macro_name})
  list(POP_BACK CMAKE_REQUIRED_DEFINITIONS)
  foreach(LOOP_LIB ${YALIBCT_POTENTIALLY_WANTED_LIBRARIES})
    if (YALIBCT_HAS_LIBRARY_${LOOP_LIB})
      list(POP_BACK CMAKE_REQUIRED_LIBRARIES)
    endif()
  endforeach()
  if (${${macro_name}})
    list(APPEND YALIBCT_COMPILE_DEFINITIONS "${macro_name}")
    set(YALIBCT_COMPILE_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")
  else()
    list(APPEND YALIBCT_COMPILE_DEFINITIONS "${symbol_name}=THE_LIBC_THIS_WAS_COMPILED_UNDER_DOESNT_HAVE_${symbol_name}")
    set(YALIBCT_COMPILE_DEFINITIONS "${YALIBCT_COMPILE_DEFINITIONS}" CACHE INTERNAL "YALIBCT_COMPILE_DEFINITIONS")
  endif()

endfunction()

function(yalibct_check_standard_libc_symbol symbol_name include_filename macro_name error_controlling_macro_name standard_name)

  # The AND NOT part is to suppress the stupid warnings CMake gives out if we only test whether the macros are defined
  if (DEFINED ${macro_name} AND NOT ${macro_name})
    return()
  endif()
  yalibct_check_libc_symbol(${symbol_name} "${include_filename}" ${macro_name})
  if ((NOT ${${macro_name}}) AND (NOT ${error_controlling_macro_name}))
    message(SEND_ERROR "${standard_name} mandates ${symbol_name} be present, but it was not found on the system ! (note: define ${macro_name} to OFF to suppress this error, or YALIBCT_DISABLE_MANDATING_${standard_name}_SYMBOLS to ON to suppress this error for every function of the ${standard_name} standard)")
  endif()

endfunction()

function(yalibct_check_c11_libc_symbol symbol_name include_filename macro_name)
  yalibct_check_standard_libc_symbol(${symbol_name} "${include_filename}" ${macro_name} ${YALIBCT_DISABLE_MANDATING_C11_SYMBOLS} "C11")
endfunction()

function(yalibct_check_c99_libc_symbol symbol_name include_filename macro_name)
  yalibct_check_standard_libc_symbol(${symbol_name} "${include_filename}" ${macro_name} ${YALIBCT_DISABLE_MANDATING_C99_SYMBOLS} "C99")
endfunction()

function(yalibct_check_c95_libc_symbol symbol_name include_filename macro_name)
  yalibct_check_standard_libc_symbol(${symbol_name} "${include_filename}" ${macro_name} ${YALIBCT_DISABLE_MANDATING_C95_SYMBOLS} "C95")
endfunction()

function(yalibct_check_posix_libc_symbol symbol_name include_filename macro_name)
  yalibct_check_standard_libc_symbol(${symbol_name} "${include_filename}" ${macro_name} ${YALIBCT_DISABLE_MANDATING_POSIX_SYMBOLS} "POSIX")
endfunction()

function(yalibct_make_executable_add_library_if_available target_name library_name)


endfunction()

function(yalibct_make_executable target_name target_source_file)

  add_executable(${target_name} ${target_source_file})
  target_include_directories(${target_name}
    PRIVATE "${CMAKE_SOURCE_DIR}/include"
  )
  target_compile_definitions(${target_name} PRIVATE "${YALIBCT_COMPILE_DEFINITIONS}")
  set_target_properties(${target_name}
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/test-binaries"
    )
  foreach(LOOP_LIB ${YALIBCT_POTENTIALLY_WANTED_LIBRARIES})
    if (${YALIBCT_HAS_LIBRARY_${LOOP_LIB}})
      target_link_libraries(${target_name} ${LOOP_LIB})
    endif()
  endforeach()

endfunction()

yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_LC_NUMERIC_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_ROUNDING_DIRECTION_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_RARE_LOCALE_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_B_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_E_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_G_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_UPPERCASE_L_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_A_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_NUMBERED_ARGUMENTS_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_UPPERCASE_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_HASH_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_S_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_N_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_UPPERCASE_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_LOWERCASE_F_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_0_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_L_FLAG_ON_C_CONVERSION_SPECIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_ALL_NON_STANDARD_LOCALE_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_HH_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_PRECISION_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_T_LENGTH_MODIFIER_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_APOSTROPHE_FLAG_TESTS)
yalibct_append_macro_to_compiler_flags(YALIBCT_DISABLE_PRINTF_C_CONVERSION_SPECIFIER_TESTS)

yalibct_check_include_file(hedley.h YALIBCT_HAS_SYSTEM_HEDLEY_H)
yalibct_check_include_file(obstack.h YALIBCT_LIBC_HAS_OBSTACK_H)

yalibct_check_libc_symbol(vstrdupf string.h YALIBCT_LIBC_HAS_VSTRDUPF)
yalibct_check_libc_symbol(memchr_inv string.h YALIBCT_LIBC_HAS_MEMCHR_INV)
yalibct_check_c99_libc_symbol(NAN math.h YALIBCT_LIBC_HAS_NAN)
yalibct_check_posix_libc_symbol(fcvt stdlib.h YALIBCT_LIBC_HAS_FCVT)
yalibct_check_posix_libc_symbol(ecvt stdlib.h YALIBCT_LIBC_HAS_ECVT)
yalibct_check_libc_symbol(xmalloc xalloc.h YALIBCT_LIBC_HAS_XMALLOC)
yalibct_check_libc_symbol(xalloc_die xalloc.h YALIBCT_LIBC_HAS_XALLOC_DIE)
yalibct_check_libc_symbol(error error.h YALIBCT_LIBC_HAS_ERROR)
yalibct_check_libc_symbol(getprogname stdlib.h YALIBCT_LIBC_HAS_GETPROGNAME)
yalibct_check_libc_symbol(program_invocation_short_name errno.h YALIBCT_LIBC_HAS_PROGRAM_INVOCATION_SHORT_NAME)
yalibct_check_libc_symbol(program_invocation_name errno.h YALIBCT_LIBC_HAS_PROGRAM_INVOCATION_NAME)
yalibct_check_libc_symbol(getexecname stdlib.h YALIBCT_LIBC_HAS_GETEXECNAME)
yalibct_check_libc_symbol(__argv stdlib.h YALIBCT_LIBC_HAS___ARGV)
yalibct_check_libc_symbol(__progname stdlib.h YALIBCT_LIBC_HAS___PROGNAME)
yalibct_check_libc_symbol(mtrace mcheck.h YALIBCT_LIBC_HAS_MTRACE)
yalibct_check_libc_symbol(mcheck_pedantic mcheck.h YALIBCT_LIBC_HAS_MCHECK_PEDANTIC)
yalibct_check_libc_symbol(mcheck_check_all mcheck.h YALIBCT_LIBC_HAS_MCHECK_CHECK_ALL)
yalibct_check_c95_libc_symbol(vswprintf "wchar.h;stdio.h" YALIBCT_LIBC_HAS_VSWPRINTF)
yalibct_check_c95_libc_symbol(fwprintf "wchar.h;stdio.h" YALIBCT_LIBC_HAS_FWPRINTF)
yalibct_check_c95_libc_symbol(swprintf "wchar.h;stdio.h" YALIBCT_LIBC_HAS_SWPRINTF)
yalibct_check_c95_libc_symbol(vfwprintf "wchar.h;stdio.h" YALIBCT_LIBC_HAS_VFWPRINTF)
yalibct_check_c99_libc_symbol(fesetround fenv.h YALIBCT_LIBC_HAS_FESETROUND)
yalibct_check_c99_libc_symbol(INFINITY math.h YALIBCT_LIBC_HAS_INFINITY)
yalibct_check_posix_libc_symbol(NL_ARGMAX limits.h YALIBCT_LIBC_HAS_NL_ARGMAX)
yalibct_check_c11_libc_symbol(static_assert assert.h YALIBCT_LIBC_HAS_STATIC_ASSERT)
yalibct_check_c99_libc_symbol(fegetround fenv.h YALIBCT_LIBC_HAS_FEGETROUND)
yalibct_check_libc_symbol(printf_size printf.h YALIBCT_LIBC_HAS_PRINTF_SIZE)
yalibct_check_libc_symbol(__builtin_printf stdio.h YALIBCT_LIBC_HAS___BUILTIN_PRINTF)
yalibct_check_libc_symbol(__builtin_putchar stdio.h YALIBCT_LIBC_HAS___BUILTIN_PUTCHAR)
yalibct_check_libc_symbol(__builtin_puts stdio.h YALIBCT_LIBC_HAS___BUILTIN_PUTS)
yalibct_check_libc_symbol(__builtin_printf_unlocked stdio.h YALIBCT_LIBC_HAS___BUILTIN_PRINTF_UNLOCKED)
yalibct_check_libc_symbol(printf_unlocked stdio.h YALIBCT_LIBC_HAS_PRINTF_UNLOCKED)

yalibct_make_executable(libc-starts-up tests/libc-starts-up.c)
yalibct_make_executable(printf-KOS-mk4-test-positional-printf tests/printf/KOS-mk4-test-positional-printf.c)
yalibct_make_executable(printf-linux-kernel-test_printf tests/printf/linux-kernel-test_printf.c)
yalibct_make_executable(printf-NetBSD-t_printf tests/printf/NetBSD-t_printf.c)
yalibct_make_executable(printf-FreeBSD-printfloat_test tests/printf/FreeBSD-printfloat_test.c)
yalibct_make_executable(printf-FreeBSD-atf-printf_test tests/printf/FreeBSD-atf-printf_test.c)
yalibct_make_executable(printf-FreeBSD-plain-printf_test tests/printf/FreeBSD-plain-printf_test.c)
yalibct_make_executable(printf-FreeBSD-tap-printf_test tests/printf/FreeBSD-tap-printf_test.c)
yalibct_make_executable(printf-fuchsia-printf_tests tests/printf/fuchsia-printf_tests.c)
yalibct_make_executable(printf-illumos-gate-printf-6961 tests/printf/illumos-gate-printf-6961.c)
yalibct_make_executable(printf-illumos-gate-printf-9511 tests/printf/illumos-gate-printf-9511.c)
yalibct_make_executable(printf-reactos-printf tests/printf/reactos-printf.c)
yalibct_make_executable(printf-littlekernel-printf_tests tests/printf/littlekernel-printf_tests.c)
yalibct_make_executable(printf-toaruos-test-printf tests/printf/toaruos-test-printf.c)
yalibct_make_executable(printf-newsys-test-printf tests/printf/newsys-test.printf.c)
yalibct_make_executable(printf-osv-tst-printf tests/printf/osv-tst-printf.c)
yalibct_make_executable(printf-OpenBSD-fp tests/printf/OpenBSD-fp.c)
yalibct_make_executable(printf-OpenBSD-int tests/printf/OpenBSD-int.c)
yalibct_make_executable(printf-OpenBSD-string tests/printf/OpenBSD-string.c)
yalibct_make_executable(printf-llvm-project-printf_test tests/printf/llvm-project-printf_test.c)
yalibct_make_executable(printf-gcc-printf tests/printf/gcc-printf.c)
yalibct_make_executable(printf-gcc-printf-1 tests/printf/gcc-printf-1.c)
yalibct_make_executable(printf-gcc-printf-2 tests/printf/gcc-printf-2.c)
yalibct_make_executable(printf-llvm-test-suite-2002-04-17-PrintfChar tests/printf/llvm-test-suite-2002-04-17-PrintfChar.c)
yalibct_make_executable(printf-tcc-02_printf tests/printf/tcc-02_printf.c)
yalibct_make_executable(printf-wine-msvcrt-printf tests/printf/wine-msvcrt-printf.c)
yalibct_make_executable(printf-wine-ucrtbase-printf tests/printf/wine-ucrtbase-printf.c)
yalibct_make_executable(printf-glibc-tst-printf-binary tests/printf/glibc-tst-printf-binary.c)
yalibct_make_executable(printf-glibc-tst-obprintf tests/printf/glibc-tst-obprintf.c)
yalibct_make_executable(printf-glibc-tst-printf-bz18872-sh-output tests/printf/glibc-tst-printf-bz18872-sh-output.c)
yalibct_make_executable(printf-glibc-tst-printf-bz25691 tests/printf/glibc-tst-printf-bz25691.c)
yalibct_make_executable(printf-glibc-tst-printf-fp-free tests/printf/glibc-tst-printf-fp-free.c)
yalibct_make_executable(printf-glibc-tst-printf-fp-leak tests/printf/glibc-tst-printf-fp-leak.c)
yalibct_make_executable(printf-glibc-tst-printf-round tests/printf/glibc-tst-printf-round.c)
yalibct_make_executable(printf-glibc-tst-printf tests/printf/glibc-tst-printf.c)
yalibct_make_executable(printf-glibc-tst-printfsz-islongdouble tests/printf/glibc-tst-printfsz-islongdouble.c)
yalibct_make_executable(printf-glibc-tst-printfsz tests/printf/glibc-tst-printfsz.c)
yalibct_make_executable(printf-glibc-tst-wc-printf tests/printf/glibc-tst-wc-printf.c)
